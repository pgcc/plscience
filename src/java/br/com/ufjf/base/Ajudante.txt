
	boolean dataCorreta = false;
		while (dataCorreta == false) {
		  System.out.println("DIGITE UMA DATA CORRETA Ex: 06/03/1971");
		  String var = le.nextLine();
		  dataCorreta = verificaData(var);
		  if (dataCorreta == true) {
		  
		  dataCorreta = true;
		  }
		}
		
		
		
		
	private static void	
	
	
	//private static void	 formataDataString_VIEW()
	//private static void	 verificaData_VIEW()
	//private static void	 verificaHora_VIEW()
	//private static void	 getWeeksOfMonth_VIEW()
	//private static void	 getDiasDeDeusTerQua_VIEW()
	//private static void	 getDiasDeDeusQuaQui_VIEW()
	//private static void	 getDiasDeDeusTerQuaAnoSeguinte_VIEW()
	//private static void	 getDiasDeDeusQuaQuiAnoSeguinte_VIEW()
	//private static void	 getMesesdoAno_VIEW()
	//private static void	 getDiaDaSemana_VIEW()
	//private static void	 get6em6MesesDoAno_VIEW()
	//private static void	 calcIdade_VIEW()
	//private static void	 calcIdadeString_VIEW()
	//private static void	 retornaDiaSemana_VIEW()
	//private static void	 dataPassada_VIEW()
	//private static void	 getHojeFormat_VIEW()
	//private static void	 horaNow_VIEW()
	//private static void	 getHoje_VIEW()
	//private static void	 subtraiHora_VIEW()
	//private static void	 getDATA_VIEW()
	//private static void	 getMinutos_VIEW()
	//private static void	 verificaNumerosString_VIEW()
	//private static void	 ehNumerico_VIEW()
	//private static void	 ehNumerico02_VIEW()
	//private static void	 tamanhoIgualA11_VIEW()
	//private static void	 nhaFaixa1_VIEW()
	//private static void	 naFaixaEntre1e9_VIEW()
	//private static void	 naFaixaEntre1e2_VIEW()
	//private static void	 tamanhoEntre4e9_VIEW()
	//private static void	 tamanhoEntre1e11_VIEW()
	//private static void	 nhaFaixa2_VIEW()
	//private static void	 naFaixaEntre1e5_VIEW()
	//private static void	 naFaixaEntre1e6_VIEW()
	//private static void	naFaixaEntre1a7_VIEW()
	//private static void	naFaixaEntre1a9_VIEW()
	//private static void	nhaFaixa1a8_VIEW()
	//private static void	nhaFaixa3_VIEW()
	//private static void	naFaixaEntre1e3_VIEW()
	//private static void	validaIdentificador_VIEW()
	//private static void	validaIdentificador2_VIEW()
	//private static void	retornaTypeIdentificador_VIEW()
	//private static void	WhatSystemOS_VIEW()
	//private static void	salvarArquivo_VIEW()
	//private static void	removieContentFile_VIEW()
	//private static void	AbreArquivo_VIEW()
	//private static void	deletFile_VIEW()
	//private static void	deletFile_VIEW()
	private static void	sorteioAleatorioArraylist_VIEW();
	//private static void	lerArquivoPrincipal_VIEW()
	//private static void	Writingfile_VIEW()
	//private static void	HasMapInterator_VIEW()
	//private static void	LoopMap_VIEW()
	//private static void	StringBufferDemo_VIEW()
	//private static void	imprimeArrayList_VIEW()
	private static void	retiraAspasHtml_VIEW()
	private static void	removeSpaces_VIEW()
	private static void	primeiroNome_VIEW()
	private static void	geraMD5_VIEW()
	private static void	submeterUrl_VIEW()
	
	
	private static void menuVerificacoes_4_2() {
		System.out.println("|---------(6)-Menu Verificacoes-II----------|");
		System.out.println("|-(01)-naFaixaEntre1e5()--------------------|");
		System.out.println("|-(02)-naFaixaEntre1e6()--------------------|");
		System.out.println("|-(03)-naFaixaEntre1a7()--------------------|");
		System.out.println("|-(04)-naFaixaEntre1a9()--------------------|");
		System.out.println("|-(05)-nhaFaixa1a8()------------------------|");
		System.out.println("|-(06)-nhaFaixa3()--------------------------|");
		System.out.println("|-(07)-naFaixaEntre1e3()--------------------|");
		System.out.println("|-(08)-validaIdentificador()----------------|");
		System.out.println("|-(09)-validaIdentificador2()---------------|");
		System.out.println("|-(10)-retornaTypeIdentificador()-----------|");
		System.out.println("|-(11)-WhatSystemOS()-----------------------|");
		System.out.println("|-(12)-SAIR---------------------------------|");
		System.out.println("|----------------------x--------------------|");
		System.out.println("");
		System.out.println("");
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.ufjf.control.servico;

import br.com.ufjf.util.FacesUtil;
import java.util.List;
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author magnus
 */
@WebService(serviceName = "ServAcessoBanco")
public class ServAcessoBanco {

    private static Session session;

    /**
     * This is a sample web service operation
     *
     * @param txt
     * @return
     */
    @WebMethod(operationName = "hello")
    public String hello(@WebParam(name = "name") String txt) {
        return "Hello " + txt + " !";
    }

    /**
     * Operação de Web service
     *
     * @param SQL1
     * @return
     */
    @WebMethod(operationName = "ExecutaSQL")
    public String ExecutaSQL(@WebParam(name = "SQL1") String SQL1) {
        String retorno = "null";
        try {
            session = (Session) FacesUtil.getRequestAttribute("session");

            Query queri = (Query) session.createSQLQuery(SQL1);

        } catch (HibernateException e) {
            System.err.println(e.fillInStackTrace());
        }
        return retorno;
    }

    /**
     * Operação de Web service
     * @param SQL2
     * @return 
     */
    @WebMethod(operationName = "ExecutaSQLObject")
    public Object ExecutaSQLObject(@WebParam(name = "SQL2") String SQL2) {
        Object ONE = null;
        try {
            session = (Session) FacesUtil.getRequestAttribute("session");

            Query queri = (Query) session.createSQLQuery(SQL2);
            ONE = ((Object) queri.uniqueResult());
        } catch (HibernateException e) {
            System.err.println(e.fillInStackTrace());
        }
        return ONE;
    }

    /**
     * Operação de Web
     * @param SQL3 
     * @return 
     */
    @WebMethod(operationName = "ExecutaSQLList")
    public List ExecutaSQLList(@WebParam(name = "SQL3") String SQL3) {
        List<?> lista = null;
        try {
             session = (Session) FacesUtil.getRequestAttribute("session");            
            Query queri = (Query) session.createSQLQuery(SQL3);
            lista = ((List<?>) queri.list());
        } catch (HibernateException e) {          
            System.err.println(e.fillInStackTrace());
        } 
        return lista;
    }
    
 
    
    
    
}//ultimo

	
	
	
	
	
	
	
	
package br.com.ufjf.control.servico;

import br.com.ufjf.util.FacesUtil;
import java.util.List;
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author magnus
 */
@WebService(serviceName = "ServAcessoBanco")
public class ServAcessoBanco {

    private static Session session;

    /**
     * This is a sample web service operation
     *
     * @param txt
     * @return
     */
    @WebMethod(operationName = "hello")
    public String hello(@WebParam(name = "name") String txt) {
        return "Hello " + txt + " !";
    }

    /**
     * Operação de Web service
     *
     * @param sqlInsert
     */
    @WebMethod(operationName = "ExecSQL")
    public Void ExecSQL(@WebParam(name = "sqlInsert") String sqlInsert) {
        try {
            session = (Session) FacesUtil.getRequestAttribute("session");

            Query queri = (Query) session.createSQLQuery(sqlInsert);

        } catch (HibernateException e) {
            System.err.println(e.fillInStackTrace());
        }
        return null;
    }

    /**
     * Operação de Web service
     *
     * @param sqlSelectID
     * @return
     */
    @WebMethod(operationName = "ExecSQLObject")
    public Object ExecSQLObject(@WebParam(name = "sqlSelectID") String sqlSelectID) {
        Object ONE = null;
        try {
            session = (Session) FacesUtil.getRequestAttribute("session");

            Query queri = (Query) session.createSQLQuery(sqlSelectID);
            ONE = ((Object) queri.uniqueResult());
        } catch (HibernateException e) {
            System.err.println(e.fillInStackTrace());
        }
        return ONE;
    }

    /**
     * Operação de Web service
     *
     * @param sqlSelectList
     * @return
     */
    @WebMethod(operationName = "ExecSQLList")
    public List ExecSQLList(@WebParam(name = "sqlSelectList") String sqlSelectList) {
        List<?> lista = null;
        try {
            session = (Session) FacesUtil.getRequestAttribute("session");
            Query queri = (Query) session.createSQLQuery(sqlSelectList);
            lista = ((List<?>) queri.list());
        } catch (HibernateException e) {
            System.err.println(e.fillInStackTrace());
        }
        return lista;
    }
}//ultimo
	
	
	
	
	

package br.com.ufjf.control.servico;

import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;

/**
 *
 * @author magnus
 */
@WebService(serviceName = "ServAnotacao")
public class ServAnotacao {

    /**
     * This is a sample web service operation
     * @param txt
     * @return 
     */
    @WebMethod(operationName = "hello")
    public String hello(@WebParam(name = "name") String txt) {
        return "Hello " + txt + " !";
    }

    /**
     * Operação de Web service
     * @param description
     * @param idRationale
     * @return 
     */
    @WebMethod(operationName = "doAnotation")
    public String doAnotation(@WebParam(name = "description") String description, @WebParam(name = "idRationale") int idRationale) {
       String retorno;
        retorno = "INSERT INTO `collaborate`.`notes` (`idNotes`, `Description`, `Subfeatures`, `idRationale`) VALUES (NULL, '"
                + description + "', NULL, '" + idRationale + "');";

        return retorno;
    }
}
	
	
public static void main(String[] args){
        
          ServAnotacao_Service webservice = new ServAnotacao_Service();
        
        ServAnotacao servico = webservice.getServAnotacaoPort();
        
        String description = JOptionPane.showInputDialog("description: ");
        int idRationale = Integer.parseInt(JOptionPane.showInputDialog("idRationale: "));
        
        String resultado = servico.doAnotation(description, idRationale);
        
        JOptionPane.showMessageDialog(null, resultado);
        
    }




INSERT INTO `collaborate`.`notes` (`idNotes`, `Description`, `Subfeatures`, `idRationale`) VALUES (NULL, '"
                + description + "', NULL, '" + idRationale + "');";	



























































package br.com.ufjf.acessoBanco.servico;

import br.com.ufjf.dao.GenericDAO;
import java.util.List;
import java.util.Map;
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;

/**
 *
 * @author magnus
 */
@WebService(serviceName = "ServAcessoBanco")
public class ServAcessoBanco {

    private final GenericDAO genericDAO = new GenericDAO();

    /**
     * This is a sample web service operation
     *
     * @param txt
     * @return
     */
    @WebMethod(operationName = "hello")
    public String hello(@WebParam(name = "name") String txt) {
        return "Hello " + txt + " !";
    }

    /**
     * Operação de Web service
     *
     * @param object
     * @return
     */
    @WebMethod(operationName = "salvar")
    public Boolean salvar(@WebParam(name = "object") Object object) {
        Boolean retorno;
        genericDAO.salvar(object);
        retorno = true;
        return retorno;
    }

    /**
     * Operação de Web service
     *
     * @param objectAtualiza
     * @return
     */
    @WebMethod(operationName = "atualizar")
    public Boolean atualizar(@WebParam(name = "objectAtualiza") Object objectAtualiza) {
        Boolean retorno;
        genericDAO.atualizar(objectAtualiza);
        retorno = true;
        return retorno;
    }

    /**
     * Operação de Web service
     *
     * @param id
     * @param parameter1
     * @return
     */
    @WebMethod(operationName = "pesquisarPorId")
    public Object pesquisarPorId(@WebParam(name = "id") int id, @WebParam(name = "parameter1") Class parameter1) {
        Object retorno;
        retorno = genericDAO.pesquisarPorId(id, parameter1);
        return retorno;
    }

    /**
     * Operação de Web service
     *
     * @param classTodos
     * @return
     */
    @WebMethod(operationName = "todos")
    public List todos(@WebParam(name = "classTodos") Class classTodos) {
        List<?> objetos;
        objetos = genericDAO.todos(classTodos);
        return objetos;
    }

    /**
     * Operação de Web service
     *
     * @param objectExcluir
     * @return
     */
    @WebMethod(operationName = "excluir")
    public Boolean excluir(@WebParam(name = "objectExcluir") Object objectExcluir) {
        Boolean retorno;
        genericDAO.excluir(objectExcluir);
        retorno = true;
        return retorno;
    }

    /**
     * Operação de Web service
     *
     * @param queryPesq
     * @return
     */
    @WebMethod(operationName = "pesq")
    public Object pesq(@WebParam(name = "queryPesq") String queryPesq) {
        Object retorno;
        retorno = genericDAO.PesqII(queryPesq);
        return retorno;
    }

    /**
     * Operação de Web service
     *
     * @param queryListPesq
     * @return
     */
    @WebMethod(operationName = "listPesq")
    public List listPesq(@WebParam(name = "queryListPesq") String queryListPesq) {
        List<?> objetos;
        objetos = genericDAO.listPesqII(queryListPesq);
        return objetos;
    }

    /**
     * Operação de Web service
     *
     * @param queryPesqParam
     * @param params
     * @return
     */
    @WebMethod(operationName = "pesqParam")
    public Object pesqParam(@WebParam(name = "queryPesqParam") String queryPesqParam, @WebParam(name = "params") Map params) {
        Object retorno;
        retorno = genericDAO.pesqParamII(queryPesqParam, params);
        return retorno;
    }

    /**
     * Operação de Web service
     *
     * @param queryListPesqParam
     * @param params
     * @return
     */
    @WebMethod(operationName = "listPesqParam")
    public List listPesqParam(@WebParam(name = "queryListPesqParam") String queryListPesqParam, @WebParam(name = "params") Map params) {
        List<?> objetos;
        objetos = genericDAO.listPesqParamII(queryListPesqParam, params);
        return objetos;
    }
}//ultimo







































package br.com.ufjf.webService.acessoBanco;

import br.com.ufjf.dao.GenericDAO;
import br.com.ufjf.model.main.Notes;
import java.util.List;
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;

/**
 *
 * @author magnus
 */
@WebService(serviceName = "ServAcessoBanco")
public class ServAcessoBanco {

    private final GenericDAO genericDAO = new GenericDAO();

    /**
     * This is a sample web service operation
     *
     * @param txt
     * @return
     */
    @WebMethod(operationName = "hello")
    public String hello(@WebParam(name = "name") String txt) {
        return "Hello " + txt + " !";
    }

    /**
     * Operação de Web service
     *
     * @param object
     * @return
     */
    @WebMethod(operationName = "salvar")
    public Boolean salvar(@WebParam(name = "object") Notes object) {

        Boolean retorno;
        genericDAO.salvar(object);
        retorno = true;
        return retorno;
    }

    /**
     * Operação de Web service
     *
     * @param objectAtualiza
     * @return
     */
    @WebMethod(operationName = "atualizar")
    public Boolean atualizar(@WebParam(name = "objectAtualiza") Notes objectAtualiza) {
        Boolean retorno;
        genericDAO.atualizar(objectAtualiza);
        retorno = true;
        return retorno;
    }

    /**
     * Operação de Web service
     *
     * @param id
     * @param notes
     * @return
     */
    @WebMethod(operationName = "pesquisarPorId")
    public Object pesquisarPorId(@WebParam(name = "id") int id, @WebParam(name = "notes") Notes notes) {
        Object retorno;
        retorno = genericDAO.pesquisarPorId(id, notes.getClass());
        return retorno;
    }

    /**
     * Operação de Web service
     *
     * @param classTodos
     * @return
     */
    @WebMethod(operationName = "todos")
    public List<Notes> todos(@WebParam(name = "classTodos") Class classTodos) {
        List<Notes> objetos;
        objetos = (List<Notes>) genericDAO.todos(classTodos);
        return objetos;
    }

    /**
     * Operação de Web service
     *
     * @param objectExcluir
     * @return
     */
    @WebMethod(operationName = "excluir")
    public Boolean excluir(@WebParam(name = "objectExcluir") Notes objectExcluir) {
        Boolean retorno;
        genericDAO.excluir(objectExcluir);
        retorno = true;
        return retorno;
    }

    /**
     * Operação de Web service
     *
     * @param queryPesq
     * @return
     */
    @WebMethod(operationName = "pesq")
    public Notes pesq(@WebParam(name = "queryPesq") String queryPesq) {
        Notes retorno;
        retorno = (Notes) genericDAO.PesqII(queryPesq);
        return retorno;
    }

    /**
     * Operação de Web service
     *
     * @param queryListPesq
     * @return
     */
    @WebMethod(operationName = "listPesq")
    public List<Notes> listPesq(@WebParam(name = "queryListPesq") String queryListPesq) {
        List<Notes> objetos;
        objetos = (List<Notes>) genericDAO.listPesqII(queryListPesq);
        return objetos;
    }

}//ultimo




  /**
     * Operação de Web service
     * @param description
     * @param idRationale
     * @return 
     */
    @WebMethod(operationName = "fullNotesXML")
    public String fullNotesXML(@WebParam(name = "description") String description, @WebParam(name = "idRationale") int idRationale) {
        XStream stream = new XStream();
        Notes nt = new Notes();
        nt.setDescription(description);
        nt.setIdRationale(idRationale);
        nt.setSubfeatures(null);
        stream.alias("nt", Notes.class);
        String xml = stream.toXML(nt);
        return xml;
    }


ServNotes